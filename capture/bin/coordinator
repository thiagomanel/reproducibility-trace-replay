#!/bin/bash -e

source ../../conf/experiment.conf

function check {
   local base_out=$1
   local outpath=$base_out".check.out"
   local errpath=$base_out".check.err"
   $CHECK_PATH > $outpath 2> $errpath
}

function drop_caches {
   local base=$1
   local outpath=$base".dropcache.local.out"
   local errpath=$base".dropcache.local.err"
   $DROP_CACHE_PATH > $outpath 2> $errpath
}

function cpu_util {
   local base=$1
   outpath=$base".cpu_util.out"
   errpath=$base".cpu_util.err"
   mpstat 1 > $outpath 2> $errpath < /dev/null &
}

function kill_cpu_util {
   killall "mpstat"
}

function cpu_freq {
   local base=$1
   outpath=$base".cpu_freq.out"
   errpath=$base".cpu_freq.err"
   $CPU_FREQ_PATH > $outpath 2> $errpath < /dev/null &
}

function kill_cpu_freq {
   killall "cpu_freq.sh"
}

function background {
   $BACKGROUND_PATH > /dev/null 2> /dev/null < /dev/null &
}

function killall_background {
   killall -q "background"
}

function create_dirs {
   mkdir -p $CAPTURE_OUTDIR
}

function foreground {
   local workload=$1
   local nthreads=$2
   local delay=$3
   local nops=$4
   local loader_input=$5
   local blksize=$6
   local trace_tool=$7
   local base_out=$8

   outpath=$base_out".out"
   errpath=$base_out".err"

   foreground_bin=$WORKLOAD_BIN_DIR/$workload
   foreground_cmd="$foreground_bin $nthreads $delay $nops $loader_input $blksize debug"

   case "$trace_tool" in
			baseline)
				$foreground_cmd > $outpath 2> $errpath
				;;
			stap)
				stap_out=$base_out".stap"
				stap -g -DSTP_NO_OVERLOAD -DMAXMAPENTRIES=10000 $STAP_SCRIPT_PATH -c "$foreground_cmd > $outpath 2> $errpath" > $stap_out
				;;
			strace)
				strace_out=$base_out".strace"
				strace -e trace=open,read,write,pread64,pwrite64,close -T -s -q -ttt -o $strace_out -f $foreground_cmd > $outpath 2> $errpath
				;;
			*)
				echo $"Unknown command: $trace_tool {baseline|stap|strace}"
				exit 1
	esac
}

function show_help {
	echo "Illegal number of parameters. Usage: $0 workload nthreads delay nops blksize nsamples nbackground trace_tool"
	echo -n "Usage:  $0 -w | --workload GUEST_USERNAME "
	echo -n "-nt | --nthreads NUMBER_OF_THREADS "
	echo -n "-d | --delay DELAY "
	echo -n "-no | --nops NUMBER_OF_OPERATIONS "
	echo -n "-bs | --blksize BLOCK_SIZE "
	echo -n "-ns | --nsamples NUMBER_OF_SAMPLES "
	echo -n "-bg | --nbackground NUMBER_OF_BACKGROUND_JOBS"
	echo "-t | --trace_tool TRACE_TOOL"

	echo -e "\t$0 -h | --help"

	echo
	echo "-h  | --help: shows this help"
	echo "-w  | --workload: the type of operation (rr, rw, seqr, seqw)"
	echo "-nt | --nthreads: number of simulated threads"
	echo "-d  | --delay: delay in (milliseconds?) between operations"
	echo "-no | --nops: number of operations per thread"
	echo "-bs | --blksize: size of the block used"
	echo "-ns | --nsamples: number of samples to be generated"
	echo "-bg | --nbackground: number of background jobs occuping the cpu"
	echo "-t  | --trace_tool: the trace tool used (baseline | strace | stap)"
}

function success_or_die {
	if [ "$?" -ne "0" ]; then
		exit 1;
	fi
}

function check_parameter {
	if [ "$#" -ne 2 ]; then
		echo "$1 is missing"
		show_help
		exit 1
	fi
}

function check_parameters {
	check_parameter $workload "-w  | --workload"
	success_or_die
	check_parameter $nthreads "-nt | --nthreads"
	success_or_die
	check_parameter $delay "-d  | --delay"
	success_or_die
	check_parameter $nops "-no | --nops"
	success_or_die
	check_parameter $blksize "-bs | --blksize"
	success_or_die
	check_parameter $nsamples "-ns | --nsamples"
	success_or_die
	check_parameter $nbackground "-bg | --nbackground"
	success_or_die
	check_parameter $trace_tool "-t  | --trace_tool"
	success_or_die
}

function define_parameters {
	while [ ! -z $1 ]; do
		case $1 in
			-w | --workload)
				shift;
				workload=$1;
				;;
			-nt | --nthreads)
				shift;
				nthreads=$1;
				;;
			-d | --delay)
				shift;
				delay=$1;
				;;
			-no | --nops)
				shift;
				nops=$1;
				;;
			-bs | --blksize)
				shift;
				blksize=$1;
				;;
			-ns | --nsamples)
				shift;
				nsamples=$1;
				;;
			-bg | --nbackground)
				shift;
				nbackground=$1;
				;;
			-t | --trace_tool)
				shift;
				trace_tool=$1;
				;;
			-h | --help | *)
				show_help;
				exit 0;
				;;
		esac
		shift
	done
	check_parameters
	success_or_die
}

function main {
	for sample in `seq $nsamples`; do
		echo "running sample: " $sample
		base_out=$CAPTURE_OUTDIR/$sample.$RANDOM.$workload.$nthreads.$delay.$nops.$blksize.$sample.$nbackground".load"

		echo "umount target fs"
		umount $TARGET_MNT
		echo "drop vm page cache"
		drop_caches $base_out
		echo "checking machine state before experiment"
		check $base_out

		for i in `seq $nbackground`; do
			echo "starting background", $i
      background
		done

		echo "mount target fs"
		mount $TARGET_MNT

		echo "start load"
		sleep 5
		foreground $workload $nthreads $delay $nops $FOREGROUND_INPUT $blksize $trace_tool $base_out
		sleep 5
		echo "kill background"
		killall_background
	done
}

define_parameters $@
success_or_die
create_dirs
main
