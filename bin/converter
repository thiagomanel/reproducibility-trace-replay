#!/bin/bash

#
# This script converts a baseline trace for beefs_repl (fs or timestamp), and artc (strace) format.
#
# Usage: $0 output_format [beefs-fs | beefs-timestamp | artc] input_dir output_dir
#
# output_format: [beefs-fs | beefs-timestamp | artc] output format specify the formar
#                (beefs_repl or strace) and the ordering os the trace (fs or timestamp)
# input_dir: directory with baseline traces to convert
# output_dir: directory to store converted traces
#

if [ ! $HOME_REPLAYER ]; then
	echo "You need to export HOME_REPLAYER"
	exit 1;
fi;

source $HOME_REPLAYER/etc/scripts-lib.sh

if [ $# -ne 3 ]; then
	echo "Usage: $0 output_format [beefs-fs | beefs-timestamp | artc] input_dir output_dir";
	exit 1;
fi

output_format=$1;
input_dir=$2;
output_dir=$3;

mkdir -p $output_dir

# Note that this method receives these parameters from exec_iteration
convert() {
	local workload=$1;
	local nthreads=$2;
	local delay=$3;
	local nops=$4;
	local blksize=$5;
	local sample=$6;
	local nbackground=$7;

	# $nsample.$RANDOM.$workload.$nthreads.$delay.$nops.$blksize.$nsample.$nbackground".load"
	local input_baseline_file=$(ls $input_dir/$sample.*.$workload.$nthreads.$delay.$nops.$blksize.$sample.$nbackground.load.out)

	case $output_format in
		beefs-fs)
			local output_file=$output_dir/$(basename $input_baseline_file).fs;
			local converter=$HOME_REPLAYER/src/trace-converters/src/convert-baseline-to-beefs_repl.py;
			python $converter $workload fs < $input_baseline_file > $output_file;
			;;
		beefs-timestamp)
			local output_file=$output_dir/$(basename $input_baseline_file).timestamp;
			local converter=$HOME_REPLAYER/src/trace-converters/src/convert-baseline-to-beefs_repl.py;
			python $converter $workload timestamp < $input_baseline_file > $output_file;
			;;
		artc)
			local output_file=$output_dir/$(basename $input_baseline_file).strace;
			local converter=$HOME_REPLAYER/src/trace-converters/src/convert-baseline-to-artc.py;
			python $converter $workload < $input_baseline_file > $output_file;
			;;
		*)
			echo "output_format must be [beefs-fs | beefs-timestamp | artc]";
			exit 1;
			;;
	esac
}

log_file=/tmp/converter.$output_format.log

echo "===> STARTING `date` <===" > $log_file

# exec_iteration is a method in scripts-lib.sh file
exec_iteration convert 2>&1 | tee $log_file;

echo "===> FINISHED `date` <===" >> $log_file
