#!/usr/bin/env stap
/**
* Copyright (C) 2008 Universidade Federal de Campina Grande
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/** @author Thiago Emmanuel Pereira thiago.manel@gmail.com */

global open, pread, read, pwrite, write

probe syscall.open {
    if (shouldlog()) {
        p = tid()
	now = gettimeofday_us()
	open[p] = now
    }
}
probe syscall.open.return {
    if  (shouldlog()) {
        now = gettimeofday_us()
	p = tid()
	begin = open[p]
	if (begin) {
	    e = now - begin
	    printf("%s %d %d %d %d %s %d %s\n", probefunc(), p, begin, now, e, user_string($filename), $return, execname())
	}
	delete open[p]
    }
}

probe kernel.function("sys_pread64") {
    if (shouldlog()) {
        p = tid()
	now = gettimeofday_us()
	pread[p] = now
    }
}
probe kernel.function("sys_pread64").return {
    if (shouldlog()) {
        now = gettimeofday_us()
	p = tid()
	begin = pread[p]
	if (begin) {
	    e = now - begin
	    printf("%s %d %d %d %d %d %d %d %s\n", probefunc(), p, begin, now, e, $fd, $count, $pos, execname())
	}
	delete pread[p]
    }
}

probe syscall.read {
    if (shouldlog()) {
        p = tid()
	now = gettimeofday_us()
	read[p] = now
    }
}
probe syscall.read.return {
    if (shouldlog()) {
        now = gettimeofday_us()
	p = tid()
	begin = read[p]
	if (begin) {
	    e = now - begin
	    printf("%s %d %d %d %d %d %d %s\n", probefunc(), p, begin, now, e, $count, $fd, execname())
	}
	delete read[p]
    }
}

probe syscall.write {
    if (shouldlog()) {
        p = tid()
	now = gettimeofday_us()
	write[p] = now
    }
}
probe syscall.write.return {
    if (shouldlog()) {
        now = gettimeofday_us()
	p = tid()
	begin = write[p]
	if (begin) {
	    e = now - begin
	    printf("%s %d %d %d %d %d %d %s\n", probefunc(), p, begin, now, e, $count, $fd, execname())
	}
	delete write[p]
    }
}

probe kernel.function("sys_pwrite64") {
    if (shouldlog()) {
        p = tid()
	now = gettimeofday_us()
	pwrite[p] = now
    }
}
probe kernel.function("sys_pwrite64").return {
    if (shouldlog()) {
        now = gettimeofday_us()
	p = tid()
	begin = pwrite[p]
	if (begin) {
	    e = now - begin
	    printf("%s %d %d %d %d %d %d %d %s\n", probefunc(), p, begin, now, e, $fd, $count, $pos, execname())
	}
	delete pwrite[p]
    }
}

function shouldlog() {
    return execname() == "rr" ||
           execname() == "rw" ||
           execname() == "seqr" ||
           execname() == "seqw"
}

probe end {
    printf("#end\n")
}

probe begin {
    printf("#begin\n")
}
