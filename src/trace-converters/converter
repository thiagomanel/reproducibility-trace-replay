#!/bin/bash

source ../conf/experiment.conf

CONVERTER=./convert-baseline-to-beefs_repl.py
WORKLOAD="rw rr seqw seqr"
ORDER_POLICY="fs timestamp"

create_dir() {
	local order_policy=$1
	converted_oudir="$CONVERTED_OUTDIR-$order_policy"
	
	mkdir -p $converted_oudir
}

show_help() {
	echo "Usage: $0 -f | --out-format [beefs_repl | artc]"
}

success_or_die() {
	if [ "$?" -ne "0" ]; then
		exit 1;
	fi
}

check_parameter() {
	if [ "$#" -ne 2 ]; then
		echo "$1 is missing"
		show_help
		exit 1
	fi


}

define_parameters() {
	while [ ! -z $1 ]; do
		case $1 in
			-o | --out-format)
			shift;
			format=$1;
			;;
			-h | --help | *)
			show_help;
			exit 0;
			;;
		esac
		shift
	done
	check_parameter $format "-o | --out-format"
	success_or_die
}

convert_beefs_repl() {
	local converter=./src/convert-baseline-to-beefs_repl.py

	for order_policy in $ORDER_POLICY; do
		create_dir $order_policy;

		for workload in $WORKLOAD; do
			for trace_file in $CAPTURE_OUTDIR/*.*.$workload.*.*.*.*.*.*.load.out; do
				local trace_file_name=$(basename $trace_file)
				echo "--> converting (beefs_repl: $order_policy): $trace_file_name"
				python $converter $workload $order_policy < $trace_file > $converted_oudir/$trace_file_name
			done
		done
	done
}

convert_artc() {
	local converter=./src/convert-baseline-to-artc.py
	create_dir "artc"

	for workload in $WORKLOAD; do
		for trace_file in $CAPTURE_OUTDIR/*.*.$workload.*.*.*.*.*.*.load.out; do
			local trace_file_name=$(basename $trace_file)
			echo "--> converting (artc): $trace_file_name"
			python $converter $workload < $trace_file > $converted_oudir/$trace_file_name
		done
	done

}

exec_convertion() {
	case $1 in
		beefs_repl)
			convert_beefs_repl;
			;;
		artc)
			convert_artc;
			;;
		*)
			show_help;
			exit 1;
	esac
}

main() {
	define_parameters $@;
	exec_convertion $format
}

main $@;
